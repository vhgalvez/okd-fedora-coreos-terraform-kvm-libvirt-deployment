variant: flatcar
version: 1.1.0

ignition:
  version: 3.4.0

passwd:
  users:
    - name: core
      shell: /bin/bash
      sudo: ["ALL=(ALL) NOPASSWD:ALL"]
      groups: [adm, wheel]
      lock_passwd: false
      ssh_authorized_keys:
        - ${ssh_keys}
    - name: root
      shell: /bin/bash
      ssh_authorized_keys:
        - ${ssh_keys}
      password_hash: "$6$hNh1nwO5OWWct4aZ$OoeAkQ4gKNBnGYK0ECi8saBMbUNeQRMICcOPYEu1bFuj9Axt4Rh6EnGba07xtIsGNt2wP9SsPlz543gfJww11/"

storage:
  directories:
    - path: /etc/kubernetes/pki
      filesystem: root
      mode: 0755
    - path: /opt/bin
      filesystem: root
      mode: 0755
    - path: /etc/cni/net.d
      filesystem: root
      mode: 0755

  files:
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline: ${host_name}

    - path: /etc/systemd/timesyncd.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          [Time]
          NTP=10.17.3.11

    - path: /etc/kubernetes/kubelet.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              certificate-authority: /etc/kubernetes/pki/ca.crt
              server: https://${ip}:6443
            name: local
          contexts:
          - context:
              cluster: local
              user: kubelet
            name: local
          current-context: local
          users:
          - name: kubelet
            user:
              client-certificate: /etc/kubernetes/pki/kubelet.crt
              client-key: /etc/kubernetes/pki/kubelet.key

    - path: /etc/kubernetes/manifests/kube-apiserver.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-apiserver
            namespace: kube-system
            labels:
              component: kube-apiserver
              tier: control-plane
          spec:
            containers:
            - name: kube-apiserver
              image: k8s.gcr.io/kube-apiserver:v1.21.0
              command:
              - kube-apiserver
              - --advertise-address=${ip}
              - --allow-privileged=true
              - --authorization-mode=Node,RBAC
              - --client-ca-file=/etc/kubernetes/pki/ca.crt
              - --enable-admission-plugins=NodeRestriction
              - --etcd-servers=https://${ip}:2379
              - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
              - --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt
              - --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
              - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
              - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key
              - --runtime-config=api/all=true
              - --service-account-key-file=/etc/kubernetes/pki/sa.pub
              - --service-account-signing-key-file=/etc/kubernetes/pki/sa.key
              - --service-account-issuer=https://kubernetes.default.svc.cluster.local
              - --service-cluster-ip-range=10.96.0.0/12
              - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
              - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
              - --v=2
              ports:
              - containerPort: 6443
                hostPort: 6443
                name: https
                protocol: TCP
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: 6443
                  scheme: HTTPS
                initialDelaySeconds: 15
                timeoutSeconds: 15
              readinessProbe:
                httpGet:
                  path: /healthz
                  port: 6443
                  scheme: HTTPS
                initialDelaySeconds: 15
                timeoutSeconds: 15
              volumeMounts:
              - mountPath: /etc/kubernetes/pki
                name: pki
                readOnly: true
              - mountPath: /var/lib/kubernetes
                name: var-lib-kubernetes
                readOnly: true
            hostNetwork: true
            volumes:
            - name: pki
              hostPath:
                path: /etc/kubernetes/pki
            - name: var-lib-kubernetes
              hostPath:
                path: /var/lib/kubernetes
            - name: etc-kubernetes-manifests
              hostPath:
                path: /etc/kubernetes/manifests
            - name: etc-ssl-certs
              hostPath:
                path: /etc/ssl/certs

    - path: /etc/kubernetes/kubelet-config.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            x509:
              clientCAFile: "/etc/kubernetes/pki/ca.crt"
          authorization:
            mode: Webhook
          serverTLSBootstrap: true
          tlsCertFile: "/etc/kubernetes/pki/kubelet.crt"
          tlsPrivateKeyFile: "/etc/kubernetes/pki/kubelet.key"
          cgroupDriver: systemd
          runtimeRequestTimeout: "15m"
          containerRuntimeEndpoint: "unix:///var/run/crio/crio.sock"

    - path: /etc/kubernetes/kube-proxy-config.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: kubeproxy.config.k8s.io/v1alpha1
          kind: KubeProxyConfiguration
          clientConnection:
            kubeconfig: "/etc/kubernetes/kube-proxy.kubeconfig"
          mode: "iptables"
          clusterCIDR: "10.244.0.0/16"

    - path: /etc/systemd/network/10-eth0.network
      filesystem: root
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=eth0

          [Network]
          Address=${ip}/24
          Gateway=${gateway}
          DNS=${dns1}
          DNS=${dns2}

    - path: /etc/tmpfiles.d/hosts.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          f /etc/hosts 0644 - - - -
          127.0.0.1   localhost
          ::1         localhost
          ${ip}  ${host_name} ${node_name}

    - path: /run/systemd/resolve/resolv.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          nameserver ${dns1}
          nameserver ${dns2}

    - path: /etc/tmpfiles.d/resolv.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          L /etc/resolv.conf - - - - /run/systemd/resolve/resolv.conf

    - path: /etc/kubernetes/scheduler.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              certificate-authority: /etc/kubernetes/pki/ca.crt
              server: https://${ip}:6443
            name: kubernetes
          contexts:
          - context:
              cluster: kubernetes
              user: system:kube-scheduler
            name: system:kube-scheduler@kubernetes
          current-context: system:kube-scheduler@kubernetes
          users:
          - name: system:kube-scheduler
            user:
              client-certificate: /etc/kubernetes/pki/kube-scheduler.crt
              client-key: /etc/kubernetes/pki/kube-scheduler.key

    - path: /etc/kubernetes/controller-manager.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              certificate-authority: /etc/kubernetes/pki/ca.crt
              server: https://${ip}:6443
            name: kubernetes
          contexts:
          - context:
              cluster: kubernetes
              user: system:kube-controller-manager
            name: system:kube-controller-manager@kubernetes
          current-context: system:kube-controller-manager@kubernetes
          users:
          - name: system:kube-controller-manager
            user:
              client-certificate: /etc/kubernetes/pki/kube-controller-manager.crt
              client-key: /etc/kubernetes/pki/kube-controller-manager.key

    - path: /etc/kubernetes/kube-proxy.kubeconfig
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              certificate-authority: /etc/kubernetes/pki/ca.crt
              server: https://${ip}:6443
            name: kubernetes
          contexts:
          - context:
              cluster: kubernetes
              user: system:kube-proxy
            name: default
          current-context: default
          users:
          - name: system:kube-proxy
            user:
              client-certificate: /etc/kubernetes/pki/kube-proxy.crt
              client-key: /etc/kubernetes/pki/kube-proxy.key

    - path: /home/core/install-components.sh
      filesystem: root
      mode: 0755
      contents:
        inline: |
          #!/bin/bash
          exec > /var/log/install-components.log 2>&1
          sudo mkdir -p /opt/bin /etc/kubernetes/pki /opt/cni/bin /etc/kubernetes/pki/etcd
          sudo curl -L -o /tmp/kube-proxy https://dl.k8s.io/release/v1.31.0/bin/linux/amd64/kube-proxy
          sudo mv /tmp/kube-proxy /opt/bin/kube-proxy
          sudo chmod +x /opt/bin/kube-proxy

          # Instalar etcd (v3.5.9)
          sudo curl -L -o /tmp/etcd.tar.gz https://github.com/etcd-io/etcd/releases/download/v3.5.9/etcd-v3.5.9-linux-amd64.tar.gz
          sudo tar -xzf /tmp/etcd.tar.gz -C /tmp
          sudo mv /tmp/etcd-v3.5.9-linux-amd64/etcd /opt/bin/etcd
          sudo chmod +x /opt/bin/etcd
          sudo rm -rf /tmp/etcd.tar.gz /tmp/etcd-v3.5.9-linux-amd64

systemd:
  units:
    - name: crio.service
      enabled: true
      contents: |
        [Unit]
        Description=CRI-O container runtime
        After=network.target
        [Service]
        Type=notify
        ExecStart=/opt/bin/crio
        Restart=always
        RestartSec=5
        LimitNOFILE=65536
        LimitNPROC=4096
        [Install]
        WantedBy=multi-user.target

    - name: etcd.service
      enabled: true
      contents: |
        [Unit]
        Description=etcd
        Documentation=https://github.com/coreos/etcd
        After=network.target
        [Service]
        User=etcd
        Type=notify
        Environment="ETCD_DATA_DIR=/var/lib/etcd"
        ExecStart=/opt/bin/etcd
        Restart=always
        RestartSec=10s
        [Install]
        WantedBy=multi-user.target

    - name: systemd-timesyncd.service
      enabled: true
      contents: |
        [Unit]
        Description=Network Time Synchronization
        After=network.target
        [Service]
        ExecStart=/usr/lib/systemd/systemd-timesyncd
        Restart=always
        RestartSec=0
        [Install]
        WantedBy=sysinit.target