variant: flatcar
version: 1.1.0

ignition:
  version: 3.4.0

passwd:
  users:
    - name: core
      shell: /bin/bash
      sudo: ["ALL=(ALL) NOPASSWD:ALL"]
      groups: [adm, wheel]
      lock_passwd: false
      ssh_authorized_keys:
        - ${ssh_keys}
    - name: root
      shell: /bin/bash
      ssh_authorized_keys:
        - ${ssh_keys}
      password_hash: "$6$hNh1nwO5OWWct4aZ$OoeAkQ4gKNBnGYK0ECi8saBMbUNeQRMICcOPYEu1bFuj9Axt4Rh6EnGba07xtIsGNt2wP9SsPlz543gfJww11/"

storage:
  files:
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline: ${host_name}

    # Common certificates
    - path: /etc/kubernetes/pki/ca.crt
      filesystem: root
      mode: 0644
      contents:
        source: http://helper.cefaslocalserver.com/shared/ca/ca.crt
        verification: {}
    - path: /etc/kubernetes/pki/kubelet.crt
      filesystem: root
      mode: 0644
      contents:
        source: http://helper.cefaslocalserver.com/${node_name}/kubelet/kubelet.crt
        verification: {}
    - path: /etc/kubernetes/pki/kubelet.key
      filesystem: root
      mode: 0600
      contents:
        source: http://helper.cefaslocalserver.com/${node_name}/kubelet/kubelet.key
        verification: {}

    # Master-specific certificates
    - path: /etc/kubernetes/pki/apiserver.crt
      filesystem: root
      mode: 0644
      contents:
        source: http://helper.cefaslocalserver.com/shared/apiserver/apiserver.crt
        verification: {}
    - path: /etc/kubernetes/pki/apiserver.key
      filesystem: root
      mode: 0600
      contents:
        source: http://helper.cefaslocalserver.com/shared/apiserver/apiserver.key
        verification: {}
    - path: /etc/kubernetes/pki/sa.pub
      filesystem: root
      mode: 0644
      contents:
        source: http://helper.cefaslocalserver.com/shared/sa/sa.pub
        verification: {}
    - path: /etc/kubernetes/pki/sa.key
      filesystem: root
      mode: 0600
      contents:
        source: http://helper.cefaslocalserver.com/shared/sa/sa.key
        verification: {}
    - path: /etc/kubernetes/pki/etcd/etcd.crt
      filesystem: root
      mode: 0644
      contents:
        source: http://helper.cefaslocalserver.com/shared/etcd/etcd.crt
        verification: {}
    - path: /etc/kubernetes/pki/etcd/etcd.key
      filesystem: root
      mode: 0600
      contents:
        source: http://helper.cefaslocalserver.com/shared/etcd/etcd.key
        verification: {}
    - path: /etc/kubernetes/pki/etcd/ca.crt
      filesystem: root
      mode: 0644
      contents:
        source: http://helper.cefaslocalserver.com/shared/etcd/ca.crt
        verification: {}
    - path: /etc/kubernetes/pki/apiserver-etcd-client.crt
      filesystem: root
      mode: 0644
      contents:
        source: http://helper.cefaslocalserver.com/shared/apiserver-etcd-client/apiserver-etcd-client.crt
        verification: {}
    - path: /etc/kubernetes/pki/apiserver-etcd-client.key
      filesystem: root
      mode: 0600
      contents:
        source: http://helper.cefaslocalserver.com/shared/apiserver-etcd-client/apiserver-etcd-client.key
        verification: {}

systemd:
  units:
    - name: crio.service
      enabled: true

    - name: apply-network-routes.service
      enabled: true
      contents: |
        [Unit]
        Description=Apply custom network routes
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/systemctl restart systemd-networkd.service
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: set-hosts.service
      enabled: true
      contents: |
        [Unit]
        Description=Set /etc/hosts file
        After=network.target

        [Service]
        Type=oneshot
        ExecStart=/bin/bash -c 'echo "127.0.0.1   localhost" > /etc/hosts; echo "::1         localhost" >> /etc/hosts; echo "${ip}  ${host_name} ${node_name}" >> /etc/hosts'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: install-components.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Kubernetes components
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=oneshot
        ExecStart=/bin/bash /home/core/install-components.sh
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: kube-apiserver.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes API Server
        After=network.target

        [Service]
        ExecStart=/opt/bin/kube-apiserver --config=/etc/kubernetes/manifests/kube-apiserver.yaml
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    - name: kube-controller-manager.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Controller Manager
        After=network.target

        [Service]
        ExecStart=/opt/bin/kube-controller-manager --config=/etc/kubernetes/manifests/kube-controller-manager.yaml
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    - name: kube-scheduler.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Scheduler
        After=network.target

        [Service]
        ExecStart=/opt/bin/kube-scheduler --config=/etc/kubernetes/manifests/kube-scheduler.yaml
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=kubelet: The Kubernetes Node Agent
        Documentation=https://kubernetes.io/docs/
        Wants=crio.service
        After=crio.service

        [Service]
        ExecStart=/opt/bin/kubelet \
          --kubeconfig=/etc/kubernetes/kubelet.conf \
          --config=/etc/kubernetes/kubelet-config.yaml \
          --container-runtime=remote \
          --container-runtime-endpoint=unix:///var/run/crio/crio.sock \
          --runtime-request-timeout=15m \
          --image-gc-high-threshold=80 \
          --image-gc-low-threshold=40 \
          --enforce-node-allocatable=cpu,memory \
          --fail-swap-on=false \
          --cgroup-driver=systemd \
          --network-plugin=cni \
          --cni-bin-dir=/opt/cni/bin \
          --cni-conf-dir=/etc/cni/net.d \
          --pod-infra-container-image=k8s.gcr.io/pause:3.1 \
          --v=2
        Restart=on-failure

        [Install]
        WantedBy=multi-user.target