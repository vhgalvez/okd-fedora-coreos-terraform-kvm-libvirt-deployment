variant: flatcar
version: 1.1.0

ignition:
  version: 3.4.0

passwd:
  users:
    - name: core
      shell: /bin/bash
      sudo: ["ALL=(ALL) NOPASSWD:ALL"]
      groups: [adm, wheel]
      lock_passwd: false
      ssh_authorized_keys:
        - ${ssh_keys}
    - name: root
      shell: /bin/bash
      ssh_authorized_keys:
        - ${ssh_keys}
      password_hash: "$6$hNh1nwO5OWWct4aZ$OoeAkQ4gKNBnGYK0ECi8saBMbUNeQRMICcOPYEu1bFuj9Axt4Rh6EnGba07xtIsGNt2wP9SsPlz543gfJww11/"

storage:
  directories:
    - path: /etc/kubernetes/pki
      filesystem: root
      mode: 0755
    - path: /opt/bin
      filesystem: root
      mode: 0755
    - path: /etc/cni/net.d
      filesystem: root
      mode: 0755

  files:
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline: ${host_name}

    - path: /etc/kubernetes/kubelet.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              certificate-authority: /etc/kubernetes/pki/ca.crt
              server: https://${ip}:6443
            name: local
          contexts:
          - context:
              cluster: local
              user: kubelet
            name: local
          current-context: local
          users:
          - name: kubelet
            user:
              client-certificate: /etc/kubernetes/pki/kubelet.crt
              client-key: /etc/kubernetes/pki/kubelet.key

    - path: /etc/kubernetes/manifests/kube-apiserver.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-apiserver
            namespace: kube-system
            labels:
              component: kube-apiserver
              tier: control-plane
          spec:
            containers:
            - name: kube-apiserver
              image: k8s.gcr.io/kube-apiserver:v1.21.0
              command:
              - kube-apiserver
              - --advertise-address=${ip}
              - --allow-privileged=true
              - --authorization-mode=Node,RBAC
              - --client-ca-file=/etc/kubernetes/pki/ca.crt
              - --enable-admission-plugins=NodeRestriction
              - --etcd-servers=https://127.0.0.1:2379
              - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
              - --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt
              - --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
              - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
              - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key
              - --runtime-config=api/all=true
              - --service-account-key-file=/etc/kubernetes/pki/sa.pub
              - --service-account-signing-key-file=/etc/kubernetes/pki/sa.key
              - --service-account-issuer=https://kubernetes.default.svc.cluster.local
              - --service-cluster-ip-range=10.96.0.0/12
              - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
              - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
              - --v=2
              ports:
              - containerPort: 6443
                hostPort: 6443
                name: https
                protocol: TCP
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: 6443
                  scheme: HTTPS
                initialDelaySeconds: 15
                timeoutSeconds: 15
              readinessProbe:
                httpGet:
                  path: /healthz
                  port: 6443
                  scheme: HTTPS
                initialDelaySeconds: 15
                timeoutSeconds: 15
              volumeMounts:
              - mountPath: /etc/kubernetes/pki
                name: pki
                readOnly: true
              - mountPath: /var/lib/kubernetes
                name: var-lib-kubernetes
                readOnly: true
            hostNetwork: true
            volumes:
            - name: pki
              hostPath:
                path: /etc/kubernetes/pki
            - name: var-lib-kubernetes
              hostPath:
                path: /var/lib/kubernetes
            - name: etc-kubernetes-manifests
              hostPath:
                path: /etc/kubernetes/manifests
            - name: etc-ssl-certs
              hostPath:
                path: /etc/ssl/certs

    - path: /etc/kubernetes/kubelet-config.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            x509:
              clientCAFile: "/etc/kubernetes/pki/ca.crt"
          authorization:
            mode: Webhook
          serverTLSBootstrap: true
          tlsCertFile: "/etc/kubernetes/pki/kubelet.crt"
          tlsPrivateKeyFile: "/etc/kubernetes/pki/kubelet.key"
          cgroupDriver: systemd
          runtimeRequestTimeout: "15m"
          containerRuntimeEndpoint: "unix:///var/run/crio/crio.sock"

    - path: /etc/kubernetes/kube-proxy-config.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: kubeproxy.config.k8s.io/v1alpha1
          kind: KubeProxyConfiguration
          clientConnection:
            kubeconfig: "/etc/kubernetes/kube-proxy.kubeconfig"
          mode: "iptables"
          clusterCIDR: "10.244.0.0/16"

    - path: /etc/systemd/network/10-eth0.network
      filesystem: root
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=eth0

          [Network]
          Address=${ip}/24
          Gateway=${gateway}
          DNS=${dns1}
          DNS=${dns2}

    - path: /etc/tmpfiles.d/hosts.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          f /etc/hosts 0644 - - - -
          127.0.0.1   localhost
          ::1         localhost
          ${ip}  ${host_name} ${node_name}

    - path: /run/systemd/resolve/resolv.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          nameserver ${dns1}
          nameserver ${dns2}

    - path: /etc/tmpfiles.d/resolv.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          L /etc/resolv.conf - - - - /run/systemd/resolve/resolv.conf

    - path: /etc/kubernetes/scheduler.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              certificate-authority: /etc/kubernetes/pki/ca.crt
              server: https://${ip}:6443
            name: kubernetes
          contexts:
          - context:
              cluster: kubernetes
              user: system:kube-scheduler
            name: system:kube-scheduler@kubernetes
          current-context: system:kube-scheduler@kubernetes
          users:
          - name: system:kube-scheduler
            user:
              client-certificate: /etc/kubernetes/pki/kube-scheduler.crt
              client-key: /etc/kubernetes/pki/kube-scheduler.key

    - path: /etc/kubernetes/controller-manager.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              certificate-authority: /etc/kubernetes/pki/ca.crt
              server: https://${ip}:6443
            name: kubernetes
          contexts:
          - context:
              cluster: kubernetes
              user: system:kube-controller-manager
            name: system:kube-controller-manager@kubernetes
          current-context: system:kube-controller-manager@kubernetes
          users:
          - name: system:kube-controller-manager
            user:
              client-certificate: /etc/kubernetes/pki/kube-controller-manager.crt
              client-key: /etc/kubernetes/pki/kube-controller-manager.key

    - path: /etc/kubernetes/kube-proxy.kubeconfig
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              certificate-authority: /etc/kubernetes/pki/ca.crt
              server: https://${ip}:6443
            name: kubernetes
          contexts:
          - context:
              cluster: kubernetes
              user: system:kube-proxy
            name: default
          current-context: default
          users:
          - name: system:kube-proxy
            user:
              client-certificate: /etc/kubernetes/pki/kube-proxy.crt
              client-key: /etc/kubernetes/pki/kube-proxy.key

    - path: /home/core/install-components.sh
      filesystem: root
      mode: 0755
      contents:
        inline: |
          #!/bin/bash
          set -euo pipefail
          exec > /var/log/install-components.log 2>&1

          # Function to check if a URL is accessible
          check_url() {
              local url=$1
              if ! curl --head --fail --silent "$url" > /dev/null; then
                  echo "Error: La URL $url no es accesible"
                  exit 1
              fi
          }

       
    
          # Download and install CRI-O
          check_url "https://storage.googleapis.com/cri-o/artifacts/cri-o.amd64.v1.30.5.tar.gz"
          sudo wget -O /tmp/crio.tar.gz "https://storage.googleapis.com/cri-o/artifacts/cri-o.amd64.v1.30.5.tar.gz"
          sudo tar -xzf /tmp/crio.tar.gz -C /opt/bin/
          sudo chmod +x /opt/bin/cri-o/crio
          sudo rm -rf /tmp/crio.tar.gz

          # Add CRI-O and CNI to the PATH
          export PATH=$PATH:/opt/bin/
          export PATH=$PATH:/opt/bin/cri-o/bin/

          # Create install script for CRI-O
          cat << 'EOF' > /tmp/install-crio.sh
          #!/bin/bash
          set -ex

          # Variables de entorno y rutas
          DESTDIR=${DESTDIR:-}
          PREFIX=${PREFIX:-/opt}
          ETCDIR=${ETCDIR:-/etc}
          LIBEXECDIR=${LIBEXECDIR:-/opt/libexec}
          LIBEXEC_CRIO_DIR=${LIBEXEC_CRIO_DIR:-$LIBEXECDIR/crio}
          ETC_CRIO_DIR=${ETC_CRIO_DIR:-$ETCDIR/crio}
          CONTAINERS_DIR=${CONTAINERS_DIR:-$ETCDIR/containers}
          CONTAINERS_REGISTRIES_CONFD_DIR=${CONTAINERS_REGISTRIES_CONFD_DIR:-$CONTAINERS_DIR/registries.conf.d}
          CNIDIR=${CNIDIR:-$ETCDIR/cni/net.d}
          BINDIR=${BINDIR:-$PREFIX/bin}
          MANDIR=${MANDIR:-$PREFIX/share/man}
          OCIDIR=${OCIDIR:-$PREFIX/share/oci-umount/oci-umount.d}
          BASHINSTALLDIR=${BASHINSTALLDIR:-$PREFIX/share/bash-completion/completions}
          FISHINSTALLDIR=${FISHINSTALLDIR:-$PREFIX/share/fish/completions}
          ZSHINSTALLDIR=${ZSHINSTALLDIR:-$PREFIX/share/zsh/site-functions}
          OPT_CNI_BIN_DIR=${OPT_CNI_BIN_DIR:-/opt/cni/bin}

          # Ajustar SYSCONFIGDIR para distribuciones basadas en Debian
          if dpkg -l >/dev/null 2>&1; then
              SYSCONFIGDIR=${SYSCONFIGDIR:-$ETCDIR/default}
              sed -i "s;sysconfig/crio;default/crio;g" etc/crio
          else
              SYSCONFIGDIR=${SYSCONFIGDIR:-$ETCDIR/sysconfig}
          fi

          # Actualizar systemddir según el sistema operativo
          source /etc/os-release
          if { [[ "${ID}" == "fedora" ]] && [[ "${VARIANT_ID}" == "coreos" ]]; } ||
              [[ "${ID}" == "rhcos" ]]; then
              SYSTEMDDIR=${SYSTEMDDIR:-/etc/systemd/system}
          else
              SYSTEMDDIR=${SYSTEMDDIR:-$PREFIX/lib/systemd/system}
          fi

          SELINUX=
          if selinuxenabled 2>/dev/null; then
              SELINUX=-Z
          fi
          ARCH=${ARCH:-amd64}

          # Instalación de directorios y archivos necesarios
          install $SELINUX -d -m 755 "$DESTDIR$CNIDIR"
          install $SELINUX -D -m 755 -t "$DESTDIR$OPT_CNI_BIN_DIR" /opt/bin/cri-o/cni-plugins/*
          install $SELINUX -D -m 644 -t "$DESTDIR$CNIDIR" /opt/bin/cri-o/contrib/11-crio-ipv4-bridge.conflist
          install $SELINUX -d -m 755 "$DESTDIR$LIBEXEC_CRIO_DIR"
          install $SELINUX -D -m 755 -t "$DESTDIR$LIBEXEC_CRIO_DIR" /opt/bin/cri-o/bin/conmon
          install $SELINUX -D -m 755 -t "$DESTDIR$LIBEXEC_CRIO_DIR" /opt/bin/cri-o/bin/conmonrs
          install $SELINUX -D -m 755 -t "$DESTDIR$LIBEXEC_CRIO_DIR" /opt/bin/cri-o/bin/crun
          install $SELINUX -D -m 755 -t "$DESTDIR$LIBEXEC_CRIO_DIR" /opt/bin/cri-o/bin/runc
          install $SELINUX -d -m 755 "$DESTDIR$BASHINSTALLDIR"
          install $SELINUX -d -m 755 "$DESTDIR$FISHINSTALLDIR"
          install $SELINUX -d -m 755 "$DESTDIR$ZSHINSTALLDIR"
          install $SELINUX -d -m 755 "$DESTDIR$CONTAINERS_REGISTRIES_CONFD_DIR"
          install $SELINUX -D -m 755 -t "$DESTDIR$BINDIR" /opt/bin/cri-o/bin/crio
          install $SELINUX -D -m 755 -t "$DESTDIR$BINDIR" /opt/bin/cri-o/bin/pinns
          install $SELINUX -D -m 755 -t "$DESTDIR$BINDIR" /opt/bin/cri-o/bin/crictl
          install $SELINUX -D -m 644 -t "$DESTDIR$ETCDIR" /opt/bin/cri-o/etc/crictl.yaml
          install $SELINUX -D -m 644 -t "$DESTDIR$OCIDIR" /opt/bin/cri-o/etc/crio-umount.conf
          install $SELINUX -D -m 644 -t "$DESTDIR$SYSCONFIGDIR" /opt/bin/cri-o/etc/crio
          install $SELINUX -D -m 644 -t "$DESTDIR$ETC_CRIO_DIR" /opt/bin/cri-o/contrib/policy.json
          install $SELINUX -D -m 644 -t "$DESTDIR$ETC_CRIO_DIR/crio.conf.d" /opt/bin/cri-o/etc/10-crio.conf
          install $SELINUX -D -m 644 -t "$DESTDIR$MANDIR/man5" /opt/bin/cri-o/man/crio.conf.5
          install $SELINUX -D -m 644 -t "$DESTDIR$MANDIR/man5" /opt/bin/cri-o/man/crio.conf.d.5
          install $SELINUX -D -m 644 -t "$DESTDIR$MANDIR/man8" /opt/bin/cri-o/man/crio.8
          install $SELINUX -D -m 644 -t "$DESTDIR$BASHINSTALLDIR" /opt/bin/cri-o/completions/bash/crio
          install $SELINUX -D -m 644 -t "$DESTDIR$FISHINSTALLDIR" /opt/bin/cri-o/completions/fish/crio.fish
          install $SELINUX -D -m 644 -t "$DESTDIR$ZSHINSTALLDIR" /opt/bin/cri-o/completions/zsh/_crio
          install $SELINUX -D -m 644 -t "$DESTDIR$SYSTEMDDIR" /opt/bin/cri-o/contrib/crio.service
          install $SELINUX -D -m 644 -t "$DESTDIR$CONTAINERS_REGISTRIES_CONFD_DIR" /opt/bin/cri-o/contrib/registries.conf

          # Actualizar las rutas en la configuración de CRI-O
          sed -i 's;/usr/bin;'"$DESTDIR$BINDIR"';g' "$DESTDIR$ETC_CRIO_DIR/crio.conf.d/10-crio.conf"
          sed -i 's;/usr/libexec;'"$DESTDIR$LIBEXECDIR"';g' "$DESTDIR$ETC_CRIO_DIR/crio.conf.d/10-crio.conf"
          sed -i 's;/etc/crio;'"$DESTDIR$ETC_CRIO_DIR"';g' "$DESTDIR$ETC_CRIO_DIR/crio.conf.d/10-crio.conf"

          # Aplicar etiquetas SELinux si está habilitado
          if [ -n "$SELINUX" ]; then
              if command -v chcon >/dev/null; then
                  chcon -u system_u -r object_r -t container_runtime_exec_t \
                      "$DESTDIR$BINDIR/crio" \
                      "$DESTDIR$LIBEXEC_CRIO_DIR/crun" \
                      "$DESTDIR$LIBEXEC_CRIO_DIR/runc"

                  chcon -u system_u -r object_r -t bin_t \
                      "$DESTDIR$LIBEXEC_CRIO_DIR/conmon" \
                      "$DESTDIR$LIBEXEC_CRIO_DIR/conmonrs" \
                      "$DESTDIR$BINDIR/crictl" \
                      "$DESTDIR$BINDIR/pinns"

                  chcon -R -u system_u -r object_r -t bin_t \
                      "$DESTDIR$OPT_CNI_BIN_DIR" \
                      "$DESTDIR$LIBEXEC_CRIO_DIR"

                  chcon -R -u system_u -r object_r -t container_config_t \
                      "$DESTDIR$ETC_CRIO_DIR" \
                      "$DESTDIR$CONTAINERS_REGISTRIES_CONFD_DIR" \
                      "$DESTDIR$CNIDIR"
              else
                  echo "Advertencia: No se encontró el comando chcon, se omite la configuración SELinux"
              fi
          fi
          EOF

          # Dar permisos de ejecución al script de instalación
          sudo chmod +x /tmp/install-crio.sh

          # Ejecutar el script de instalación de CRI-O
          sudo /tmp/install-crio.sh

          # Limpiar archivos temporales
          sudo rm -f /tmp/install-crio.sh

          # Reload systemd and enable CRI-O
          sudo systemctl daemon-reload || { echo "Error al recargar daemon de systemd"; exit 1; }
          sudo systemctl enable --now crio || { echo "Error al habilitar crio"; exit 1; }
          sudo systemctl enable extensions-crio.slice
          sudo systemctl start extensions-crio.slice

          # Finalización

          # Download and configure OKD Installer (v4.14.0)
          check_url "https://github.com/okd-project/okd/releases/download/4.14.0-0.okd-2023-12-01-225814/openshift-install-linux-4.14.0-0.okd-2023-12-01-225814.tar.gz"
          sudo curl -o /tmp/openshift-install.tar.gz "https://github.com/okd-project/okd/releases/download/4.14.0-0.okd-2023-12-01-225814/openshift-install-linux-4.14.0-0.okd-2023-12-01-225814.tar.gz"
          tar -xzvf /tmp/openshift-install.tar.gz -C /tmp
          sudo mv /tmp/openshift-install /opt/bin/
          sudo chmod +x /opt/bin/openshift-install

          # Install oc (OpenShift Client)
          check_url "https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz"
          sudo curl -L -o /tmp/oc.tar.gz "https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz"
          tar -xzf /tmp/oc.tar.gz -C /tmp
          sudo mv /tmp/oc /opt/bin/oc
          sudo chmod +x /opt/bin/oc
          sudo rm -rf /tmp/oc.tar.gz

          # Install kube-proxy
          check_url "https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kube-proxy"
          sudo curl -L -o /tmp/kube-proxy https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kube-proxy
          sudo mv /tmp/kube-proxy /opt/bin/kube-proxy
          sudo chmod +x /opt/bin/kube-proxy

          # Install etcd
          check_url "https://github.com/etcd-io/etcd/releases/download/v3.4.13/etcd-v3.4.13-linux-amd64.tar.gz"
          curl -L -o /tmp/etcd.tar.gz https://github.com/etcd-io/etcd/releases/download/v3.4.13/etcd-v3.4.13-linux-amd64.tar.gz
          tar -xzf /tmp/etcd.tar.gz -C /tmp
          sudo mv /tmp/etcd-v3.4.13-linux-amd64/etcd /opt/bin/etcd
          sudo chmod +x /opt/bin/etcd
          sudo rm -rf /tmp/etcd.tar.gz /tmp/etcd-v3.4.13-linux-amd64

          # Install kube-apiserver
          check_url "https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kube-apiserver"
          curl -L -o /tmp/kube-apiserver https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kube-apiserver
          sudo mv /tmp/kube-apiserver /opt/bin/kube-apiserver
          sudo chmod +x /opt/bin/kube-apiserver

          # Install kube-controller-manager
          check_url "https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kube-controller-manager"
          curl -L -o /tmp/kube-controller-manager https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kube-controller-manager
          sudo mv /tmp/kube-controller-manager /opt/bin/kube-controller-manager
          sudo chmod +x /opt/bin/kube-controller-manager

          # Install kube-scheduler
          check_url "https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kube-scheduler"
          curl -L -o /tmp/kube-scheduler https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kube-scheduler
          sudo mv /tmp/kube-scheduler /opt/bin/kube-scheduler
          sudo chmod +x /opt/bin/kube-scheduler

          # Install kubelet
          check_url "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubelet"
          curl -L -o /opt/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubelet
          sudo chmod +x /opt/bin/kubelet

          # Download and store certificates

          # Kubelet certificates
          check_url "http://10.17.3.14/certificates/${node_name}/kubelet/kubelet.crt"
          check_url "http://10.17.3.14/certificates/${node_name}/kubelet/kubelet.ke
          sudo curl -o /etc/kubernetes/pki/kubelet.crt http://10.17.3.14/certificates/${node_name}/kubelet/kubelet.crt
          sudo curl -o /etc/kubernetes/pki/kubelet.key http://10.17.3.14/certificates/${node_name}/kubelet/kubelet.key

          # CA certificate
          check_url "http://10.17.3.14/certificates/shared/ca/ca.crt"
          check_url "http://10.17.3.14/certificates/shared/ca/ca.key
          sudo curl -o /etc/kubernetes/pki/ca.crt http://10.17.3.14/certificates/shared/ca/ca.crt
          sudo curl -o /etc/kubernetes/pki/ca.key http://10.17.3.14/certificates/shared/ca/ca.key

          # API server certificates
          check_url "http://http://10.17.3.14/certificates/shared/apiserver/apiserver.crt
          check_url "http://http://10.17.3.14/certificates/shared/apiserver/apiserver.key
          sudo curl -o /etc/kubernetes/pki/apiserver.crt http://10.17.3.14/certificates/shared/apiserver/apiserver.crt
          sudo curl -o /etc/kubernetes/pki/apiserver.key http://10.17.3.14/certificates/shared/apiserver/apiserver.key

          # Verify and set permissions for private keys
          sudo chmod 600 /etc/kubernetes/pki/*.key /etc/kubernetes/pki/etcd/*.key
          sudo chown root:root /etc/kubernetes/pki/*.key /etc/kubernetes/pki/etcd/*.key

          # Reload systemd services
          sudo systemctl daemon-reload
          sudo systemctl enable crio kubelet kube-proxy etcd kube-controller-manager kube-apiserver kube-scheduler
          sudo systemctl start crio kubelet kube-proxy etcd kube-controller-manager kube-apiserver kube-scheduler
                  
systemd:
  units:
    - name: crio.service
      enabled: true
      contents: |
        [Unit]
        Description=CRI-O container runtime
        After=network.target

        [Service]
        Type=notify
        ExecStart=/opt/bin/crio/crio
        Environment="PATH=/opt/bin/crio:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        Restart=always
        RestartSec=5
        LimitNOFILE=65536
        LimitNPROC=4096

        [Install]
        WantedBy=multi-user.target

    - name: etcd.service
      enabled: true
      contents: |
        [Unit]
        Description=etcd key-value store
        Documentation=https://etcd.io
        After=network.target

        [Service]
        User=etcd
        Type=notify
        Environment="ETCD_DATA_DIR=/var/lib/etcd"
        Environment="ETCD_NAME=${host_name}"
        Environment="ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${ip}:2380"
        Environment="ETCD_LISTEN_PEER_URLS=https://${ip}:2380"
        Environment="ETCD_LISTEN_CLIENT_URLS=https://${ip}:2379,https://127.0.0.1:2379"
        Environment="ETCD_ADVERTISE_CLIENT_URLS=https://${ip}:2379"
        Environment="ETCD_INITIAL_CLUSTER=${host_name}=https://${ip}:2380"
        Environment="ETCD_INITIAL_CLUSTER_STATE=new"
        Environment="ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster"
        Environment="ETCD_CERT_FILE=/etc/kubernetes/pki/etcd/etcd.crt"
        Environment="ETCD_KEY_FILE=/etc/kubernetes/pki/etcd/etcd.key"
        Environment="ETCD_TRUSTED_CA_FILE=/etc/kubernetes/pki/etcd/ca.crt"
        Environment="ETCD_CLIENT_CERT_AUTH=true"
        Environment="ETCD_PEER_CERT_FILE=/etc/kubernetes/pki/etcd/etcd.crt"
        Environment="ETCD_PEER_KEY_FILE=/etc/kubernetes/pki/etcd/etcd.key"
        Environment="ETCD_PEER_TRUSTED_CA_FILE=/etc/kubernetes/pki/etcd/ca.crt"
        Environment="ETCD_PEER_CLIENT_CERT_AUTH=true"
        ExecStart=/opt/bin/etcd
        Restart=always
        RestartSec=5s
        LimitNOFILE=65536

        [Install]
        WantedBy=multi-user.target

    - name: apply-network-routes.service
      enabled: true
      contents: |
        [Unit]
        Description=Apply custom network routes
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/systemctl restart systemd-networkd.service
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: set-hosts.service
      enabled: true
      contents: |
        [Unit]
        Description=Set /etc/hosts file
        After=network.target

        [Service]
        Type=oneshot
        ExecStart=/bin/bash -c 'echo "127.0.0.1   localhost" > /etc/hosts; echo "::1         localhost" >> /etc/hosts; echo "${ip}  ${host_name} ${node_name}" >> /etc/hosts'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: download-certificates.service
      enabled: true
      contents: |
        [Unit]
        Description=Download Kubernetes Certificates
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=oneshot
        ExecStart=/bin/bash /home/core/download-certificates.sh
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: install-components.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Kubernetes components
        After=download-certificates.service
        Wants=download-certificates.service

        [Service]
        Type=oneshot
        ExecStart=/bin/bash /home/core/install-components.sh
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: kube-apiserver.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes API Server
        After=install-components.service
        Wants=install-components.service

        [Service]
        ExecStart=/opt/bin/kube-apiserver \
          --advertise-address=${ip} \
          --allow-privileged=true \
          --authorization-mode=Node,RBAC \
          --client-ca-file=/etc/kubernetes/pki/ca.crt \
          --enable-admission-plugins=NodeRestriction \
          --etcd-servers=https://127.0.0.1:2379 \
          --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt \
          --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt \
          --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key \
          --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt \
          --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key \
          --runtime-config=api/all=true \
          --service-account-key-file=/etc/kubernetes/pki/sa.pub \
          --service-account-signing-key-file=/etc/kubernetes/pki/sa.key \
          --service-account-issuer=https://kubernetes.default.svc.cluster.local \
          --service-cluster-ip-range=10.96.0.0/12 \
          --tls-cert-file=/etc/kubernetes/pki/apiserver.crt \
          --tls-private-key-file=/etc/kubernetes/pki/apiserver.key \
          --v=2
        Restart=on-failure

        [Install]
        WantedBy=multi-user.target

    - name: kube-controller-manager.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://kubernetes.io/docs/concepts/overview/components/
        After=network.target

        [Service]
        ExecStart=/opt/bin/kube-controller-manager \
          --kubeconfig=/etc/kubernetes/controller-manager.conf \
          --bind-address=0.0.0.0 \
          --leader-elect=true \
          --use-service-account-credentials=true \
          --controllers=*,bootstrapsigner,tokencleaner \
          --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt \
          --cluster-signing-key-file=/etc/kubernetes/pki/ca.key \
          --root-ca-file=/etc/kubernetes/pki/ca.crt \
          --service-account-private-key-file=/etc/kubernetes/pki/sa.key \
          --cluster-name=kubernetes \
          --cluster-cidr=10.244.0.0/16 \
          --allocate-node-cidrs=true \
          --node-cidr-mask-size=24 \
          --service-cluster-ip-range=10.96.0.0/12 \
          --v=2
        Restart=on-failure

        [Install]
        WantedBy=multi-user.target

    - name: kube-scheduler.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://kubernetes.io/docs/concepts/overview/components/
        After=network.target

        [Service]
        ExecStart=/opt/bin/kube-scheduler   --address=127.0.0.1   --kubeconfig=/etc/kubernetes/scheduler.conf   --leader-elect=true   --v=2
        Restart=on-failure

        [Install]
        WantedBy=multi-user.target

    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=kubelet: The Kubernetes Node Agent
        Documentation=https://kubernetes.io/docs/
        Wants=crio.service
        After=crio.service

        [Service]
        ExecStart=/opt/bin/kubelet --config=/etc/kubernetes/kubelet-config.yaml --kubeconfig=/etc/kubernetes/kubelet.conf
        Restart=always
        StartLimitInterval=0
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    - name: kube-proxy.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Kube-Proxy Server
        Documentation=https://kubernetes.io/docs/ 
        After=network.target

        [Service]
        ExecStart=/opt/bin/kube-proxy --config=/etc/kubernetes/kube-proxy-config.yaml
        Restart=always
        RestartSec=5
        LimitNOFILE=65536
        LimitNPROC=4096

        [Install]
        WantedBy=multi-user.target