variant: flatcar
version: 1.1.0

ignition:
  version: 3.4.0

passwd:
  users:
    - name: core
      shell: /bin/bash
      sudo: ["ALL=(ALL) NOPASSWD:ALL"]
      groups: [adm, wheel]
      lock_passwd: false
      ssh_authorized_keys:
        - ${ssh_keys}
    - name: root
      shell: /bin/bash
      ssh_authorized_keys:
        - ${ssh_keys}
      password_hash: "$6$hNh1nwO5OWWct4aZ$OoeAkQ4gKNBnGYK0ECi8saBMbUNeQRMICcOPYEu1bFuj9Axt4Rh6EnGba07xtIsGNt2wP9SsPlz543gfJww11/"

storage:
  files:
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline: ${host_name}
    - path: /home/core/install-master-components.sh
      filesystem: root
      mode: 0755
      contents:
        inline: |
          #!/bin/bash
          set -euo pipefail
          exec > /var/log/install-master-components.log 2>&1

          # Crear directorio para binarios
          sudo mkdir -p /opt/bin

          # Instalar kubelet
          curl -L -o /opt/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubelet
          sudo chmod +x /opt/bin/kubelet

          # Instalar oc (OpenShift Client)
          curl -L -o /tmp/oc.tar.gz https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xzf /tmp/oc.tar.gz -C /tmp
          sudo mv /tmp/oc /opt/bin/oc
          sudo chmod +x /opt/bin/oc
          sudo rm -rf /tmp/oc.tar.gz

          # Instalar etcd
          curl -L -o /tmp/etcd.tar.gz https://github.com/etcd-io/etcd/releases/download/v3.4.13/etcd-v3.4.13-linux-amd64.tar.gz
          tar -xzf /tmp/etcd.tar.gz -C /tmp
          sudo mv /tmp/etcd-v3.4.13-linux-amd64/etcd /opt/bin/etcd
          sudo chmod +x /opt/bin/etcd
          sudo rm -rf /tmp/etcd.tar.gz /tmp/etcd-v3.4.13-linux-amd64

          # Instalar kube-apiserver
          curl -L -o /tmp/kube-apiserver https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kube-apiserver
          sudo mv /tmp/kube-apiserver /opt/bin/kube-apiserver
          sudo chmod +x /opt/bin/kube-apiserver

          # Instalar kube-controller-manager
          curl -L -o /tmp/kube-controller-manager https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kube-controller-manager
          sudo mv /tmp/kube-controller-manager /opt/bin/kube-controller-manager
          sudo chmod +x /opt/bin/kube-controller-manager

          # Instalar kube-scheduler
          curl -L -o /tmp/kube-scheduler https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kube-scheduler
          sudo mv /tmp/kube-scheduler /opt/bin/kube-scheduler
          sudo chmod +x /opt/bin/kube-scheduler

          # Instalar CRI-O
          sudo wget -O /tmp/crio.tar.gz https://storage.googleapis.com/cri-o/artifacts/cri-o.amd64.v1.30.3.tar.gz
          sudo mkdir -p /tmp/crio
          sudo tar -xzf /tmp/crio.tar.gz -C /tmp/crio
          sudo mkdir -p /opt/bin/crio
          sudo mv /tmp/crio/cri-o/bin/* /opt/bin/crio/
          sudo chmod +x /opt/bin/crio/*
          /opt/bin/crio/crio --version

          # Descargar conmon
          wget https://github.com/containers/conmon/releases/download/v2.1.12/conmon.amd64
          sudo mv conmon.amd64 /opt/bin/crio/conmon
          sudo chmod +x /opt/bin/crio/conmon

          # Crear configuración de CRI-O
          sudo mkdir -p /etc/crio
          cat <<EOF | sudo tee /etc/crio/crio.conf
          [crio]
          log_level = "debug"
          root = "/var/lib/crio"
          runroot = "/var/run/crio"
          log_dir = "/var/log/crio/pods"
          version_file = "/var/run/crio/version"
          clean_shutdown_file = "/var/lib/crio/clean.shutdown"

          [crio.api]
          listen = "/var/run/crio/crio.sock"
          stream_address = "127.0.0.1"
          stream_port = "0"
          grpc_max_send_msg_size = 83886080
          grpc_max_recv_msg_size = 83886080

          [crio.runtime]
          default_runtime = "runc"
          no_pivot = false
          decryption_keys_path = "/etc/crio/keys/"
          cgroup_manager = "systemd"
          drop_infra_ctr = true
          infra_ctr_cpuset = ""
          shared_cpuset = ""
          namespaces_dir = "/var/run"
          enable_criu_support = true
          pinns_path = "/opt/bin/crio/pinns"
          conmon = "/opt/bin/crio/conmon"

          [crio.runtime.runtimes.runc]
          runtime_path = "/opt/bin/crio/crio-runc"
          runtime_type = "oci"
          runtime_root = "/run/runc"

          [crio.image]
          pause_image = "k8s.gcr.io/pause:3.2"
          image_volumes = "mkdir"

          [crio.network]
          network_dir = "/etc/cni/net.d/"
          plugin_dirs = ["/opt/cni/bin/"]
          EOF

          # Crear archivos de configuración en /etc/kubernetes/manifests
          sudo mkdir -p /etc/kubernetes/manifests

          sudo cat <<EOF | sudo tee /etc/kubernetes/manifests/kube-apiserver.yaml
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-apiserver
            namespace: kube-system
          spec:
            containers:
            - name: kube-apiserver
              image: k8s.gcr.io/kube-apiserver:v1.21.0
              command:
              - kube-apiserver
              - --advertise-address=10.17.4.21
              - --allow-privileged=true
              - --authorization-mode=Node,RBAC
              - --client-ca-file=/etc/kubernetes/pki/ca.crt
              - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
              - --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt
              - --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
              - --etcd-servers=https://10.17.4.21:2379
                            - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
              - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key
              - --secure-port=6443
              - --service-account-key-file=/etc/kubernetes/pki/sa.pub
              - --service-cluster-ip-range=10.96.0.0/12
              - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
              - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
              volumeMounts:
              - mountPath: /etc/kubernetes/pki
                name: pki
                readOnly: true
            volumes:
            - name: pki
              hostPath:
                path: /etc/kubernetes/pki
          EOF

          sudo cat <<EOF | sudo tee /etc/kubernetes/kubelet-config.yaml
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            x509:
              clientCAFile: "/etc/kubernetes/pki/ca.crt"
          authorization:
            mode: Webhook
          serverTLSBootstrap: true
          tlsCertFile: "/etc/kubernetes/pki/kubelet.crt"
          tlsPrivateKeyFile: "/etc/kubernetes/pki/kubelet.key"
          cgroupDriver: systemd
          runtimeRequestTimeout: "15m"
          containerRuntimeEndpoint: "unix:///var/run/crio/crio.sock"
          EOF

          # Crear archivos de servicio en /etc/systemd/system
          sudo cat <<EOF | sudo tee /etc/systemd/system/crio.service
          [Unit]
          Description=CRI-O container runtime
          After=network.target

          [Service]
          Type=notify
          ExecStart=/opt/bin/crio/crio
          Environment="PATH=/opt/bin/crio:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
          Restart=always
          RestartSec=5
          LimitNOFILE=65536
          LimitNPROC=4096

          [Install]
          WantedBy=multi-user.target
          EOF

          sudo cat <<EOF | sudo tee /etc/systemd/system/etcd.service
          [Unit]
          Description=etcd
          Documentation=https://github.com/coreos/etcd
          After=network.target

          [Service]
          User=etcd
          Type=notify
          Environment="ETCD_DATA_DIR=/var/lib/etcd"
          Environment="ETCD_NAME=etcd0"
          Environment="ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${ip}:2380"
          Environment="ETCD_LISTEN_PEER_URLS=https://${ip}:2380"
          Environment="ETCD_LISTEN_CLIENT_URLS=https://${ip}:2379,https://127.0.0.1:2379"
          Environment="ETCD_ADVERTISE_CLIENT_URLS=https://${ip}:2379"
          Environment="ETCD_INITIAL_CLUSTER=etcd0=https://${ip}:2380"
          Environment="ETCD_INITIAL_CLUSTER_STATE=new"
          Environment="ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster"
          Environment="ETCD_CERT_FILE=/etc/kubernetes/pki/etcd/etcd.crt"
          Environment="ETCD_KEY_FILE=/etc/kubernetes/pki/etcd/etcd.key"
          Environment="ETCD_TRUSTED_CA_FILE=/etc/kubernetes/pki/etcd/ca.crt"
          Environment="ETCD_CLIENT_CERT_AUTH=true"
          Environment="ETCD_PEER_CERT_FILE=/etc/kubernetes/pki/etcd/etcd.crt"
          Environment="ETCD_PEER_KEY_FILE=/etc/kubernetes/pki/etcd/etcd.key"
          Environment="ETCD_PEER_TRUSTED_CA_FILE=/etc/kubernetes/pki/etcd/ca.crt"
          Environment="ETCD_PEER_CLIENT_CERT_AUTH=true"
          ExecStart=/opt/bin/etcd
          Restart=always
          RestartSec=10s
          LimitNOFILE=40000

          [Install]
          WantedBy=multi-user.target
          EOF

          sudo cat <<EOF | sudo tee /etc/systemd/system/kube-apiserver.service
          [Unit]
          Description=Kubernetes API Server
          Documentation=https://kubernetes.io/docs/concepts/overview/components/
          After=network.target

          [Service]
          ExecStart=/opt/bin/kube-apiserver \
            --advertise-address=${ip} \
            --allow-privileged=true \
            --authorization-mode=Node,RBAC \
            --client-ca-file=/etc/kubernetes/pki/ca.crt \
            --enable-admission-plugins=NodeRestriction \
            --etcd-servers=https://127.0.0.1:2379 \
            --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt \
            --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt \
            --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key \
            --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt \
            --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key \
            --runtime-config=api/all=true \
            --service-account-key-file=/etc/kubernetes/pki/sa.pub \
            --service-account-signing-key-file=/etc/kubernetes/pki/sa.key \
            --service-account-issuer=https://kubernetes.default.svc.cluster.local \
            --service-cluster-ip-range=10.96.0.0/12 \
            --tls-cert-file=/etc/kubernetes/pki/apiserver.crt \
            --tls-private-key-file=/etc/kubernetes/pki/apiserver.key \
            --v=2
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target
          EOF

          sudo cat <<EOF | sudo tee /etc/systemd/system/kube-controller-manager.service
          [Unit]
          Description=Kubernetes Controller Manager
          Documentation=https://kubernetes.io/docs/concepts/overview/components/
          After=network.target

          [Service]
          ExecStart=/opt/bin/kube-controller-manager \
            --kubeconfig=/etc/kubernetes/controller-manager.conf \
            --bind-address=0.0.0.0 \
            --leader-elect=true \
            --use-service-account-credentials=true \
            --controllers=*,bootstrapsigner,tokencleaner \
            --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt \
            --cluster-signing-key-file=/etc/kubernetes/pki/ca.key \
            --root-ca-file=/etc/kubernetes/pki/ca.crt \
            --service-account-private-key-file=/etc/kubernetes/pki/sa.key \
            --cluster-name=kubernetes \
            --cluster-cidr=10.244.0.0/16 \
            --allocate-node-cidrs=true \
            --node-cidr-mask-size=24 \
            --service-cluster-ip-range=10.96.0.0/12 \
            --v=2
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target
          EOF

          sudo cat <<EOF | sudo tee /etc/systemd/system/kube-scheduler.service
          [Unit]
          Description=Kubernetes Scheduler
          Documentation=https://kubernetes.io/docs/concepts/overview/components/
          After=network.target

          [Service]
          ExecStart=/opt/bin/kube-scheduler --address=127.0.0.1 --kubeconfig=/etc/kubernetes/scheduler.conf --leader-elect=true --v=2
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target
          EOF

          sudo cat <<EOF | sudo tee /etc/systemd/system/kubelet.service
          [Unit]
          Description=kubelet: The Kubernetes Node Agent
          Documentation=https://kubernetes.io/docs/
          Wants=crio.service
          After=crio.service

          [Service]
          ExecStart=/opt/bin/kubelet \
            --kubeconfig=/etc/kubernetes/kubelet.conf \
            --config=/etc/kubernetes/kubelet-config.yaml \
            --container-runtime=remote \
            --container-runtime-endpoint=unix:///var/run/crio/crio.sock \
            --runtime-request-timeout=15m \
            --image-gc-high-threshold=80 \
            --image-gc-low-threshold=40 \
            --enforce-node-allocatable=cpu,memory \
            --fail-swap-on=false \
            --cgroup-driver=systemd \
            --network-plugin=cni \
            --cni-bin-dir=/opt/cni/bin \
            --cni-conf-dir=/etc/cni/net.d \
            --pod-infra-container-image=k8s.gcr.io/pause:3.1 \
            --v=2
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target
          EOF

          # Crear certificados y claves
          sudo mkdir -p /etc/kubernetes/pki/etcd

          # Generar CA
          sudo openssl genrsa -out /etc/kubernetes/pki/ca.key 2048
          sudo openssl req -x509 -new -nodes -key /etc/kubernetes/pki/ca.key -subj "/CN=kube-ca" -days 10000 -out /etc/kubernetes/pki/ca.crt

          # Generar certificados y claves para etcd
          sudo openssl genrsa -out /etc/kubernetes/pki/etcd/ca.key 2048
          sudo openssl req -new -key /etc/kubernetes/pki/etcd/ca.key -subj "/CN=etcd-ca" -out /etc/kubernetes/pki/etcd/ca.csr
          sudo openssl x509 -req -in /etc/kubernetes/pki/etcd/ca.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out /etc/kubernetes/pki/etcd/ca.crt -days 10000

          # Generar certificados y claves del API Server
          sudo openssl genrsa -out /etc/kubernetes/pki/apiserver.key 2048
          sudo openssl req -new -key /etc/kubernetes/pki/apiserver.key -subj "/CN=kube-apiserver" -out /etc/kubernetes/pki/apiserver.csr
          sudo openssl x509 -req -in /etc/kubernetes/pki/apiserver.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out /etc/kubernetes/pki/apiserver.crt -days 10000

          # Generar certificados y claves del cliente etcd
          sudo openssl genrsa -out /etc/kubernetes/pki/apiserver-etcd-client.key 2048
          sudo openssl req -new -key /etc/kubernetes/pki/apiserver-etcd-client.key -subj "/CN=etcd-client" -out /etc/kubernetes/pki/apiserver-etcd-client.csr
          sudo openssl x509 -req -in /etc/kubernetes/pki/apiserver-etcd-client.csr -CA /etc/kubernetes/pki/etcd/ca.crt -CAkey /etc/kubernetes/pki/etcd/ca.key -CAcreateserial -out /etc/kubernetes/pki/apiserver-etcd-client.crt -days 10000

          # Generar certificados y claves del cliente kubelet
          sudo openssl genrsa -out /etc/kubernetes/pki/apiserver-kubelet-client.key 2048
          sudo openssl req -new -key /etc/kubernetes/pki/apiserver-kubelet-client.key -subj "/CN=kubelet-client" -out /etc/kubernetes/pki/apiserver-kubelet-client.csr
          sudo openssl x509 -req -in /etc/kubernetes/pki/apiserver-kubelet-client.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out /etc/kubernetes/pki/apiserver-kubelet-client.crt -days 10000

          # Generar claves de servicio de cuenta
          sudo openssl genrsa -out /etc/kubernetes/pki/sa.key 2048
          sudo openssl rsa -in /etc/kubernetes/pki/sa.key -pubout -out /etc/kubernetes/pki/sa.pub

          # Generar certificados y claves de etcd 
          sudo openssl genrsa -out /etc/kubernetes/pki/etcd/etcd.key 2048
          sudo openssl req -new -key /etc/kubernetes/pki/etcd/etcd.key -subj "/CN=etcd" -out /etc/kubernetes/pki/etcd/etcd.csr
          sudo openssl x509 -req -in /etc/kubernetes/pki/etcd/etcd.csr -CA /etc/kubernetes/pki/etcd/ca.crt -CAkey /etc/kubernetes/pki/etcd/ca.key -CAcreateserial -out /etc/kubernetes/pki/etcd/etcd.crt -days 10000


          # Asignar permisos
          sudo chmod 600 /etc/kubernetes/pki/*.key
          sudo chmod 644 /etc/kubernetes/pki/*.crt
          sudo chmod 600 /etc/kubernetes/pki/etcd/*.key
          sudo chmod 644 /etc/kubernetes/pki/etcd/*.crt
          sudo chmod 644 /etc/kubernetes/pki/etcd/*.csr
          sudo chmod 644 /etc/kubernetes/pki/etcd/etcd.crt
          sudo chmod 644 /etc/kubernetes/pki/etcd/etcd.key


          # Recargar servicios y habilitar
          sudo systemctl daemon-reload

          # Habilitar y arrancar servicios
          sudo systemctl enable crio.service etcd.service kube-apiserver.service kube-controller-manager.service kube-scheduler.service kubelet.service
          sudo systemctl start crio.service etcd.service kube-apiserver.service kube-controller-manager.service kube-scheduler.service kubelet.service

          # Crear kubeconfig
          sudo kubectl config set-cluster kubernetes --server=https://${ip}:6443 --certificate-authority=/etc/kubernetes/pki/ca.crt --embed-certs=true
          sudo kubectl config set-credentials admin --client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --embed-certs=true
          sudo kubectl config set-context kubernetes --cluster=kubernetes --user=admin
          sudo kubectl config use-context kubernetes
          sudo mkdir -p /home/core/.kube
          sudo kubectl config view --flatten > /home/core/.kube/config
          sudo chown core:core /home/core/.kube/config

    - path: /etc/systemd/network/10-eth0.network
      filesystem: root
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=eth0

          [Network]
          Address=${ip}/24
          Gateway=${gateway}
          DNS=${dns1}
          DNS=${dns2}

    - path: /etc/tmpfiles.d/hosts.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          f /etc/hosts 0644 - - - -
          127.0.0.1   localhost
          ::1         localhost
          ${ip}  ${host_name} ${name}

    - path: /run/systemd/resolve/resolv.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          nameserver ${dns1}
          nameserver ${dns2}

    - path: /etc/tmpfiles.d/resolv.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          L /etc/resolv.conf - - - - /run/systemd/resolve/resolv.conf

systemd:
  units:
    - name: crio.service
      enabled: true
    - name: apply-network-routes.service
      enabled: true
      contents: |
        [Unit]
        Description=Apply custom network routes
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/systemctl restart systemd-networkd.service
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: set-hosts.service
      enabled: true
      contents: |
        [Unit]
        Description=Set /etc/hosts file
        After=network.target

        [Service]
        Type=oneshot
        ExecStart=/bin/bash -c 'echo "127.0.0.1   localhost" > /etc/hosts; echo "::1         localhost" >> /etc/hosts; echo "${ip}  ${host_name} ${name}" >> /etc/hosts'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: install-components.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Kubernetes components
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=oneshot
        ExecStart=/bin/bash /home/core/install-master-components.sh
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: kube-apiserver.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes API Server
        After=network.target

        [Service]
        ExecStart=/opt/bin/kube-apiserver --config=/etc/kubernetes/manifests/kube-apiserver.yaml
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    - name: kube-controller-manager.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Controller Manager
        After=network.target

        [Service]
        ExecStart=/opt/bin/kube-controller-manager --config=/etc/kubernetes/manifests/kube-controller-manager.yaml
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    - name: kube-scheduler.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Scheduler
        After=network.target

        [Service]
        ExecStart=/opt/bin/kube-scheduler --config=/etc/kubernetes/manifests/kube-scheduler.yaml
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=kubelet: The Kubernetes Node Agent
        Documentation=https://kubernetes.io/docs/
        Wants=crio.service
        After=crio.service

        [Service]
        ExecStart=/opt/bin/kubelet \
          --kubeconfig=/etc/kubernetes/kubelet.conf \
          --config=/etc/kubernetes/kubelet-config.yaml \
          --container-runtime=remote \
          --container-runtime-endpoint=unix:///var/run/crio/crio.sock \
          --runtime-request-timeout=15m \
          --image-gc-high-threshold=80 \
          --image-gc-low-threshold=40 \
          --enforce-node-allocatable=cpu,memory \
          --fail-swap-on=false \
          --cgroup-driver=systemd \
          --network-plugin=cni \
          --cni-bin-dir=/opt/cni/bin \
          --cni-conf-dir=/etc/cni/net.d \
          --pod-infra-container-image=k8s.gcr.io/pause:3.1 \
          --v=2
        Restart=on-failure

        [Install]
        WantedBy=multi-user.target