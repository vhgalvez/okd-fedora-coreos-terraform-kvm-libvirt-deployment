variant: flatcar
version: 1.1.0

ignition:
  version: 3.4.0

passwd:
  users:
    - name: core
      shell: /bin/bash
      sudo: ["ALL=(ALL) NOPASSWD:ALL"]
      groups: [adm, wheel]
      lock_passwd: false
      ssh_authorized_keys:
        - ${ssh_keys}
    - name: root
      shell: /bin/bash
      ssh_authorized_keys:
        - ${ssh_keys}
      password_hash: "$6$hNh1nwO5OWWct4aZ$OoeAkQ4gKNBnGYK0ECi8saBMbUNeQRMICcOPYEu1bFuj9Axt4Rh6EnGba07xtIsGNt2wP9SsPlz543gfJww11/"

storage:
  files:
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline: ${host_name}
        
    # Descargar certificados necesarios desde el servidor
    - path: /etc/kubernetes/pki/ca.crt
      filesystem: root
      mode: 0644
      contents:
        source: http://helper.cefaslocalserver.com/shared/ca/ca.crt
        verification: {}

    - path: /etc/kubernetes/pki/kubelet.crt
      filesystem: root
      mode: 0644
      contents:
        source: http://helper.cefaslocalserver.com/${node_name}/kubelet/kubelet.crt
        verification: {}

    - path: /etc/kubernetes/pki/kubelet.key
      filesystem: root
      mode: 0600
      contents:
        source: http://helper.cefaslocalserver.com/${node_name}/kubelet/kubelet.key
        verification: {}

    - path: /etc/kubernetes/pki/apiserver.crt
      filesystem: root
      mode: 0644
      contents:
        source: http://helper.cefaslocalserver.com/shared/apiserver/apiserver.crt
        verification: {}

    - path: /etc/kubernetes/pki/apiserver.key
      filesystem: root
      mode: 0600
      contents:
        source: http://helper.cefaslocalserver.com/shared/apiserver/apiserver.key
        verification: {}

    - path: /etc/kubernetes/pki/sa.pub
      filesystem: root
      mode: 0644
      contents:
        source: http://helper.cefaslocalserver.com/shared/sa/sa.pub
        verification: {}

    - path: /etc/kubernetes/pki/sa.key
      filesystem: root
      mode: 0600
      contents:
        source: http://helper.cefaslocalserver.com/shared/sa/sa.key
        verification: {}

    - path: /etc/kubernetes/pki/etcd/etcd.crt
      filesystem: root
      mode: 0644
      contents:
        source: http://helper.cefaslocalserver.com/shared/etcd/etcd.crt
        verification: {}

    - path: /etc/kubernetes/pki/etcd/etcd.key
      filesystem: root
      mode: 0600
      contents:
        source: http://helper.cefaslocalserver.com/shared/etcd/etcd.key
        verification: {}

    - path: /etc/kubernetes/pki/etcd/ca.crt
      filesystem: root
      mode: 0644
      contents:
        source: http://helper.cefaslocalserver.com/shared/ca/ca.crt
        verification: {}

    - path: /etc/kubernetes/pki/apiserver-etcd-client.crt
      filesystem: root
      mode: 0644
      contents:
        source: http://helper.cefaslocalserver.com/shared/apiserver-etcd-client/apiserver-etcd-client.crt
        verification: {}

    - path: /etc/kubernetes/pki/apiserver-etcd-client.key
      filesystem: root
      mode: 0600
      contents:
        source: http://helper.cefaslocalserver.com/shared/apiserver-etcd-client/apiserver-etcd-client.key
        verification: {}

    # Archivos de configuración del kubelet
    - path: /etc/kubernetes/kubelet.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              certificate-authority: /etc/kubernetes/pki/ca.crt
              server: https://${ip}:6443
            name: local
          contexts:
          - context:
              cluster: local
              user: kubelet
            name: local
          current-context: local
          users:
          - name: kubelet
            user:
              client-certificate: /etc/kubernetes/pki/kubelet.crt
              client-key: /etc/kubernetes/pki/kubelet.key

    - path: /etc/kubernetes/kubelet-config.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            x509:
              clientCAFile: "/etc/kubernetes/pki/ca.crt"
          authorization:
            mode: Webhook
          serverTLSBootstrap: true
          tlsCertFile: "/etc/kubernetes/pki/kubelet.crt"
          tlsPrivateKeyFile: "/etc/kubernetes/pki/kubelet.key"
          cgroupDriver: systemd
          runtimeRequestTimeout: "15m"
          containerRuntimeEndpoint: "unix:///var/run/crio/crio.sock"

    # Configuración de la red
    - path: /etc/systemd/network/10-eth0.network
      filesystem: root
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=eth0

          [Network]
          Address=${ip}/24
          Gateway=${gateway}
          DNS=${dns1}
          DNS=${dns2}

    - path: /etc/tmpfiles.d/hosts.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          f /etc/hosts 0644 - - - -
          127.0.0.1   localhost
          ::1         localhost
          ${ip}  ${host_name} ${name}

    - path: /run/systemd/resolve/resolv.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          nameserver ${dns1}
          nameserver ${dns2}

    - path: /etc/tmpfiles.d/resolv.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          L /etc/resolv.conf - - - - /run/systemd/resolve/resolv.conf

systemd:
  units:
    - name: crio.service
      enabled: true
      contents: |
        [Unit]
        Description=CRI-O container runtime
        After=network.target

        [Service]
        Type=notify
        ExecStart=/opt/bin/crio/crio
        Environment="PATH=/opt/bin/crio:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        Restart=always
        RestartSec=5
        LimitNOFILE=65536
        LimitNPROC=4096

        [Install]
        WantedBy=multi-user.target

    - name: apply-network-routes.service
      enabled: true
      contents: |
        [Unit]
        Description=Apply custom network routes
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/systemctl restart systemd-networkd.service
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: set-hosts.service
      enabled: true
      contents: |
        [Unit]
        Description=Set /etc/hosts file
        After=network.target

        [Service]
        Type=oneshot
        ExecStart=/bin/bash -c 'echo "127.0.0.1   localhost" > /etc/hosts; echo "::1         localhost" >> /etc/hosts; echo "${ip}  ${host_name} ${name}" >> /etc/hosts'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: install-components.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Kubernetes components
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=oneshot
        ExecStart=/bin/bash /home/core/install-master-components.sh
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: kube-apiserver.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes API Server
        After=network.target

        [Service]
        ExecStart=/opt/bin/kube-apiserver \
          --advertise-address=${ip} \
          --allow-privileged=true \
          --authorization-mode=Node,RBAC \
          --client-ca-file=/etc/kubernetes/pki/ca.crt \
          --enable-admission-plugins=NodeRestriction \
          --etcd-servers=https://127.0.0.1:2379 \
          --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt \
          --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt \
          --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key \
          --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt \
          --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key \
          --runtime-config=api/all=true \
          --service-account-key-file=/etc/kubernetes/pki/sa.pub \
          --service-account-signing-key-file=/etc/kubernetes/pki/sa.key \
          --service-account-issuer=https://kubernetes.default.svc.cluster.local \
          --service-cluster-ip-range=10.96.0.0/12 \
          --tls-cert-file=/etc/kubernetes/pki/apiserver.crt \
          --tls-private-key-file=/etc/kubernetes/pki/apiserver.key \
          --v=2
        Restart=on-failure

        [Install]
        WantedBy=multi-user.target

    - name: kube-controller-manager.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Controller Manager
        After=network.target

        [Service]
        ExecStart=/opt/bin/kube-controller-manager \
          --kubeconfig=/etc/kubernetes/controller-manager.conf \
          --bind-address=0.0.0.0 \
          --leader-elect=true \
          --use-service-account-credentials=true \
          --controllers=*,bootstrapsigner,tokencleaner \
          --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt \
          --cluster-signing-key-file=/etc/kubernetes/pki/ca.key \
          --root-ca-file=/etc/kubernetes/pki/ca.crt \
          --service-account-private-key-file=/etc/kubernetes/pki/sa.key \
          --cluster-name=kubernetes \
          --cluster-cidr=10.244.0.0/16 \
          --allocate-node-cidrs=true \
          --node-cidr-mask-size=24 \
          --service-cluster-ip-range=10.96.0.0/12 \
          --v=2
        Restart=on-failure

        [Install]
        WantedBy=multi-user.target

    - name: kube-scheduler.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Scheduler
        After=network.target

        [Service]
        ExecStart=/opt/bin/kube-scheduler --address=127.0.0.1 --kubeconfig=/etc/kubernetes/scheduler.conf --leader-elect=true --v=2
        Restart=on-failure

        [Install]
        WantedBy=multi-user.target

    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=kubelet: The Kubernetes Node Agent
        Documentation=https://kubernetes.io/docs/
        Wants=crio.service
        After=crio.service

        [Service]
        ExecStart=/opt/bin/kubelet \
          --kubeconfig=/etc/kubernetes/kubelet.conf \
          --config=/etc/kubernetes/kubelet-config.yaml \
          --container-runtime=remote \
          --container-runtime-endpoint=unix:///var/run/crio/crio.sock \
          --runtime-request-timeout=15m \
          --image-gc-high-threshold=80 \
          --image-gc-low-threshold=40 \
          --enforce-node-allocatable=cpu,memory \
          --fail-swap-on=false \
          --cgroup-driver=systemd \
          --network-plugin=cni \
          --cni-bin-dir=/opt/cni/bin \
          --cni-conf-dir=/etc/cni/net.d \
          --pod-infra-container-image=k8s.gcr.io/pause:3.1 \
          --v=2
        Restart=on-failure

        [Install]
        WantedBy=multi-user.target