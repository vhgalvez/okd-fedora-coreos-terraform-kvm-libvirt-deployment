variant: flatcar
version: 1.1.0

ignition:
  version: 3.4.0

passwd:
  users:
    - name: core
      shell: /bin/bash
      sudo: ["ALL=(ALL) NOPASSWD:ALL"]
      groups: [adm, wheel]
      lock_passwd: false
      ssh_authorized_keys:
        - ${ssh_keys}
    - name: root
      shell: /bin/bash
      ssh_authorized_keys:
        - ${ssh_keys}
      password_hash: "$6$hNh1nwO5OWWct4aZ$OoeAkQ4gKNBnGYK0ECi8saBMbUNeQRMICcOPYEu1bFuj9Axt4Rh6EnGba07xtIsGNt2wP9SsPlz543gfJww11/"

storage:
  files:
    - path: /etc/hostname
      filesystem: "root"
      mode: 0644
      contents:
        inline: ${host_name}
    - path: /home/core/install-master-components.sh
      filesystem: "root"
      mode: 0755
      contents:
        inline: |
          #!/bin/bash
          set -euo pipefail
          exec > /var/log/install-master-components.log 2>&1

          # Create directory for binaries
          sudo mkdir -p /opt/bin

          # Install kubelet
          curl -L -o /opt/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubelet
          sudo chmod +x /opt/bin/kubelet

          # Install oc
          curl -L -o /tmp/oc.tar.gz https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xzf /tmp/oc.tar.gz -C /tmp
          sudo mv /tmp/oc /opt/bin/oc
          sudo chmod +x /opt/bin/oc
          sudo rm -rf /tmp/oc.tar.gz

          # Install etcd
          curl -L -o /tmp/etcd.tar.gz https://github.com/etcd-io/etcd/releases/download/v3.4.13/etcd-v3.4.13-linux-amd64.tar.gz
          tar -xzf /tmp/etcd.tar.gz -C /tmp
          sudo mv /tmp/etcd-v3.4.13-linux-amd64/etcd /opt/bin/etcd
          sudo chmod +x /opt/bin/etcd
          sudo rm -rf /tmp/etcd.tar.gz /tmp/etcd-v3.4.13-linux-amd64

          # Install kube-apiserver
          curl -L -o /tmp/kube-apiserver https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kube-apiserver
          sudo mv /tmp/kube-apiserver /opt/bin/kube-apiserver
          sudo chmod +x /opt/bin/kube-apiserver

          # Install kube-controller-manager
          curl -L -o /tmp/kube-controller-manager https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kube-controller-manager
          sudo mv /tmp/kube-controller-manager /opt/bin/kube-controller-manager
          sudo chmod +x /opt/bin/kube-controller-manager

          # Install kube-scheduler
          curl -L -o /tmp/kube-scheduler https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kube-scheduler
          sudo mv /tmp/kube-scheduler /opt/bin/kube-scheduler
          sudo chmod +x /opt/bin/kube-scheduler

          # Install Podman
          sudo curl -L -o /usr/bin/podman https://github.com/containers/podman/releases/download/v3.4.2/podman-remote-static-v3.4.2-linux-amd64.tar.gz
          sudo tar -xzf /usr/bin/podman -C /usr/bin/
          sudo chmod +x /usr/bin/podman
          sudo rm -rf /usr/bin/podman

          # Verify Podman installation
          podman --version

          # Configure and start CRI-O
          sudo mkdir -p /etc/systemd/system/
          cat <<EOF | sudo tee /etc/systemd/system/crio.service
          [Unit]
          Description=CRI-O container runtime
          After=network.target

          [Service]
          ExecStartPre=-/usr/bin/podman pull quay.io/crio/crio:latest
          ExecStart=/usr/bin/podman run --name crio --rm --privileged \
          -v /var/run:/var/run -v /etc:/etc -v /usr/bin:/usr/bin \
          -v /sys:/sys -v /run:/run quay.io/crio/crio:latest
          ExecStop=/usr/bin/podman stop crio

          [Install]
          WantedBy=multi-user.target
          EOF

          # Reload systemd and start services
          sudo systemctl daemon-reload
          sudo systemctl enable kubelet
          sudo systemctl start kubelet
          sudo systemctl enable crio
          sudo systemctl start crio
          sudo systemctl enable etcd
          sudo systemctl start etcd
          sudo systemctl enable kube-apiserver
          sudo systemctl start kube-apiserver
          sudo systemctl enable kube-controller-manager
          sudo systemctl start kube-controller-manager
          sudo systemctl enable kube-scheduler
          sudo systemctl start kube-scheduler

    - path: /etc/systemd/system/podman.service
      filesystem: "root"
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=Podman API Service
          After=network.target

          [Service]
          ExecStart=/usr/bin/podman system service -t 0
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=multi-user.target

    - path: /etc/systemd/network/10-eth0.network
      filesystem: "root"
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=eth0

          [Network]
          Address=${ip}/24
          Gateway=${gateway}
          DNS=${dns1}
          DNS=${dns2}

    - path: /etc/tmpfiles.d/hosts.conf
      filesystem: "root"
      mode: 0644
      contents:
        inline: |
          f /etc/hosts 0644 - - - -
          127.0.0.1   localhost
          ::1         localhost
          ${ip}  ${host_name} ${name}

    - path: /run/systemd/resolve/resolv.conf
      filesystem: "root"
      mode: 0644
      contents:
        inline: |
          nameserver ${dns1}
          nameserver ${dns2}

    - path: /etc/tmpfiles.d/resolv.conf
      filesystem: "root"
      mode: 0644
      contents:
        inline: |
          L /etc/resolv.conf - - - - /run/systemd/resolve/resolv.conf

systemd:
  units:
    - name: crio.service
      enabled: true
    - name: podman.service
      enabled: true
    - name: apply-network-routes.service
      enabled: true
      contents: |
        [Unit]
        Description=Apply custom network routes
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/systemctl restart systemd-networkd.service
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: set-hosts.service
      enabled: true
      contents: |
        [Unit]
        Description=Set /etc/hosts file
        After=network.target

        [Service]
        Type=oneshot
        ExecStart=/bin/bash -c 'echo "127.0.0.1   localhost" > /etc/hosts; echo "::1         localhost" >> /etc/hosts; echo "${ip}  ${host_name} ${name}" >> /etc/hosts'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: install-master-components.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Kubernetes master components
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=oneshot
        ExecStart=/bin/bash /home/core/install-master-components.sh
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: getty@tty1.service
      enabled: true
      contents: |
        [Unit]
        Description=Getty on tty1
        After=systemd-user-sessions.service plymouth-quit-wait.service
        After=rc-local.service
        Wants=rc-local.service

        [Service]
        ExecStart=-/sbin/agetty %I $TERM
        Type=idle
        Restart=always

        [Install]
        WantedBy=multi-user.target