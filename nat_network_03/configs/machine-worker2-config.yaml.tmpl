variant: flatcar
version: 1.1.0

ignition:
  version: 3.4.0

passwd:
  users:
    - name: core
      shell: /bin/bash
      sudo: ["ALL=(ALL) NOPASSWD:ALL"]
      groups: [adm, wheel]
      lock_passwd: false
      ssh_authorized_keys:
        - ${ssh_keys}
    - name: root
      shell: /bin/bash
      ssh_authorized_keys:
        - ${ssh_keys}
      password_hash: "$6$hNh1nwO5OWWct4aZ$OoeAkQ4gKNBnGYK0ECi8saBMbUNeQRMICcOPYEu1bFuj9Axt4Rh6EnGba07xtIsGNt2wP9SsPlz543gfJww11/"

storage:
  files:
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline: ${host_name}
    - path: /home/core/install-components.sh
      filesystem: root
      mode: 0755
      contents:
        inline: |
          #!/bin/bash
          set -euo pipefail
          exec > /var/log/install-components.log 2>&1

          # Crear directorio para binarios
          sudo mkdir -p /opt/bin

          # Instalar kubelet
          curl -L -o /opt/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubelet
          sudo chmod +x /opt/bin/kubelet

          # Instalar oc (OpenShift Client)
          curl -L -o /tmp/oc.tar.gz https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xzf /tmp/oc.tar.gz -C /tmp
          sudo mv /tmp/oc /opt/bin/oc
          sudo chmod +x /opt/bin/oc
          sudo rm -rf /tmp/oc.tar.gz

          # Instalar CRI-O
          sudo wget -O /tmp/crio.tar.gz https://storage.googleapis.com/cri-o/artifacts/cri-o.amd64.v1.30.3.tar.gz
          sudo mkdir -p /tmp/crio
          sudo tar -xzf /tmp/crio.tar.gz -C /tmp/crio
          sudo mkdir -p /opt/bin/crio
          sudo mv /tmp/crio/cri-o/bin/* /opt/bin/crio/
          sudo chmod +x /opt/bin/crio/*
          /opt/bin/crio/crio --version

          # Descargar conmon
          wget https://github.com/containers/conmon/releases/download/v2.1.12/conmon.amd64
          sudo mv conmon.amd64 /opt/bin/crio/conmon
          sudo chmod +x /opt/bin/crio/conmon

          # Crear configuración de CRI-O
          sudo mkdir -p /etc/crio
          cat <<EOF | sudo tee /etc/crio/crio.conf
          [crio]
          log_level = "debug"
          root = "/var/lib/crio"
          runroot = "/var/run/crio"
          log_dir = "/var/log/crio/pods"
          version_file = "/var/run/crio/version"
          clean_shutdown_file = "/var/lib/crio/clean.shutdown"

          [crio.api]
          listen = "/var/run/crio/crio.sock"
          stream_address = "127.0.0.1"
          stream_port = "0"
          grpc_max_send_msg_size = 83886080
          grpc_max_recv_msg_size = 83886080

          [crio.runtime]
          default_runtime = "runc"
          no_pivot = false
          decryption_keys_path = "/etc/crio/keys/"
          cgroup_manager = "systemd"
          drop_infra_ctr = true
          infra_ctr_cpuset = ""
          shared_cpuset = ""
          namespaces_dir = "/var/run"
          enable_criu_support = true
          pinns_path = "/opt/bin/crio/pinns"
          conmon = "/opt/bin/crio/conmon"

          [crio.runtime.runtimes.runc]
          runtime_path = "/opt/bin/crio/crio-runc"
          runtime_type = "oci"
          runtime_root = "/run/runc"

          [crio.image]
          pause_image = "k8s.gcr.io/pause:3.2"
          image_volumes = "mkdir"

          [crio.network]
          network_dir = "/etc/cni/net.d/"
          plugin_dirs = ["/opt/cni/bin/"]
          EOF

          # Crear servicio systemd para CRI-O
          sudo mkdir -p /etc/systemd/system/
          cat <<EOF | sudo tee /etc/systemd/system/crio.service
          [Unit]
          Description=CRI-O container runtime
          After=network.target

          [Service]
          Type=notify
          ExecStart=/opt/bin/crio/crio
          Environment="PATH=/opt/bin/crio:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
          Restart=always
          RestartSec=5
          LimitNOFILE=65536
          LimitNPROC=4096

          [Install]
          WantedBy=multi-user.target
          EOF

          # Generar Certificados para el Nodo Worker
          /bin/bash /home/core/generate_certs_worker.sh

          # Recargar systemd y activar servicios
          sudo systemctl daemon-reload
          sudo systemctl enable kubelet
          sudo systemctl start kubelet
          sudo systemctl enable crio
          sudo systemctl start crio

    - path: /home/core/generate_certs_worker.sh
      filesystem: root
      mode: 0755
      contents:
        inline: |
          #!/bin/bash
          # Nombre del Script: generate_certs_worker.sh

          # Crear directorios para los certificados
          sudo mkdir -p /etc/kubernetes/pki

          # Copiar la CA desde el nodo Bootstrap
          scp -i "${ssh_keys}" -P 22 core@bootstrap:/etc/kubernetes/pki/ca.crt /etc/kubernetes/pki/ca.crt

          # Generar certificado del kubelet específico para este Worker
          sudo openssl genpkey -algorithm RSA -out /etc/kubernetes/pki/kubelet.key -pkeyopt rsa_keygen_bits:2048
          sudo openssl req -new -key /etc/kubernetes/pki/kubelet.key -subj "/CN=kubelet-worker" -out /etc/kubernetes/pki/kubelet.csr
          sudo openssl x509 -req -in /etc/kubernetes/pki/kubelet.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out /etc/kubernetes/pki/kubelet.crt -days 365

          # Establecer permisos y propiedad adecuados para los archivos de certificados
          sudo chmod 600 /etc/kubernetes/pki/*.key
          sudo chmod 644 /etc/kubernetes/pki/*.crt
          sudo chown root:root /etc/kubernetes/pki/*

    - path: /etc/systemd/network/10-eth0.network
      filesystem: root
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=eth0

          [Network]
          Address=${ip}/24
          Gateway=${gateway}
          DNS=${dns1}
          DNS=${dns2}

    - path: /etc/tmpfiles.d/hosts.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          f /etc/hosts 0644 - - - -
          127.0.0.1   localhost
          ::1         localhost
          ${ip}  ${host_name} ${name}

    - path: /run/systemd/resolve/resolv.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          nameserver ${dns1}
          nameserver ${dns2}

    - path: /etc/tmpfiles.d/resolv.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          L /etc/resolv.conf - - - - /run/systemd/resolve/resolv.conf

systemd:
  units:
    - name: crio.service
      enabled: true
    - name: apply-network-routes.service
      enabled: true
      contents: |
        [Unit]
        Description=Apply custom network routes
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/systemctl restart systemd-networkd.service
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: set-hosts.service
      enabled: true
      contents: |
        [Unit]
        Description=Set /etc/hosts file
        After=network.target

        [Service]
        Type=oneshot
        ExecStart=/bin/bash -c 'echo "127.0.0.1   localhost" > /etc/hosts; echo "::1         localhost" >> /etc/hosts; echo "${ip}  ${host_name} ${name}" >> /etc/hosts'
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: install-components.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Kubernetes components
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=oneshot
        ExecStart=/bin/bash /home/core/install-components.sh
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: getty@tty1.service
      enabled: true
      contents: |
        [Unit]
        Description=Getty on tty1
        After=systemd-user-sessions.service plymouth-quit-wait.service rc-local.service
        Wants=rc-local.service

        [Service]
        ExecStart=-/sbin/agetty %I $TERM
        Type=idle
        Restart=always

        [Install]
        WantedBy=multi-user.target